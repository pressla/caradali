//m2mwifi-dali plugin for hapijs
//Author: Alex Pressl for imitrix GmbH

// Declare internals
var Path = require('path');
var Hoek = require('hoek');
var Dgram = require('dgram');
var Emitter = require('events').EventEmitter;
var Relay = new Emitter();
var serial = require ('serialport').SerialPort;
var myPlugin;
var serialPort;
var sub = Dgram.createSocket('udp4');

// Defaults

var internals = {
	initialized:false,
	defaults: {
		logPath: Path.join(__dirname, '.', 'dali-poop.log'),
		multicastID: '239.1.1.200',
		targetPort:  61088
	}
};

exports.register = function (plugin, options, next) {

    
    var settings = Hoek.applyToDefaults(internals.defaults, options);
 	if (internals.initialized) {
        return next();
    }

    myPlugin = plugin;

    // Set any plugin dependent api properties here
    //plugin.api({ });

	serialPort = new serial ('/dev/ttyUSB0', {baudrate:115200}, false);
    internals.initialized = true;

	serialPort.on('data', function(data) {
		plugin.log('info','Serial DALI data received: ' + data);
		//serialPort.close();
	});


	sub.bind(settings.targetPort, function () {
	    Hoek.assert(typeof settings.multicastID === 'string', 'm2mwifi-dali >> multicastID invalid');
    	sub.addMembership(settings.multicastID);     //listen to this group  
    	plugin.log('info','server registered to listen to multicast ip: '+settings.multicastID);
	});

	sub.on('listening', function () {
    	var address = sub.address();
    	plugin.log('info',address);
    	plugin.log('info','UDP sub listening on interface' + address.address + ":" + address.port);
	});

	sub.on('message', function (buf, rinfo) {
    	var buff = new Buffer(buf).toString('ascii');
    	var obj = buff.split(',');
    	obj.push(rinfo);
    	//var msg = new Message(JSON.stringify(obj));
    	//plugin.log('info',obj);
    	Relay.emit(obj[0], obj);    //Fire the event for each command
	});

  
    next();
};


	//**********************  events processing *******************
Relay.on('switch', function (msg) {
   	myPlugin.log('info','SWITCH cmd From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'switch ' + msg[1] + ':' + msg[2]);



   	if (internals.initialized == true) {
		serialPort.open(function (err) {
	    	if (err) {
	    		myPlugin.log('info', 'Error open DALI serialport : '+ err);
	    		
	    	} else {
  				myPlugin.log('info','Serial port is connected and opened');
                var sceneID = (msg[2]/6.25).toFixed(0);
                var cmd = 0x10 + (sceneID > 0 ? sceneID-1 : 0);
                var scmd = (("0" + cmd.toString(16)).substr(-2)).toUpperCase();
                var frame = "#DALI:FF"+scmd+"\r\n";
                serialPort.write(frame, function(err, results) {
			    	if (err) {
			    		myPlugin.log('info', 'Error Write '+frame+' to DALI serialport : '+ err);
		    		}
		    		myPlugin.log('info','DALI serial write:'+frame+' result: ' + results);
		    		
		  		});
	    	} 
		});
   	}
});	

var frame;

Relay.on('sendcmd', function (msg) {
    myPlugin.log('info','SENDCMD cmd From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'switch ' + msg[1] + ':' + msg[2]);



    if (internals.initialized == true) {
        serialPort.open(function (err) {
            if (err) {
                myPlugin.log('info', 'Error open DALI serialport : '+ err);
                
            } else {
                myPlugin.log('info','Serial port is connected and opened');
                var a = parseInt(msg[1]);
                var adr = (("0" + a.toString(16)).substr(-2)).toUpperCase();
                c = parseInt(msg[2]);
                var cmd = (("0" + c.toString(16)).substr(-2)).toUpperCase();
                frame = "#DALI:"+adr+cmd+"\r\n";
                serialPort.write(frame, function(err, results) {
                    if (err) {
                        myPlugin.log('info', 'Error Write 1'+frame+' to DALI serialport : '+ err);
                    }
                    myPlugin.log('info','DALI serial write 1:'+frame+' result: ' + results);
                    if ((a>=0xF0) && c>=32 && c<=128) {
                        setTimeout(repeatCommand,40);
                    }
                    
                });
            } 
        });
    }
}); 

function repeatCommand () {
    serialPort.write(frame, function(err, results) {
        if (err) {
            myPlugin.log('info', 'Error Write 2'+frame+' to DALI serialport : '+ err);
        }
        myPlugin.log('info','DALI serial write 2:'+frame+' result: ' + results);
    });

}

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i < 1e7; i++) {
    if ((new Date().getTime() - start) > milliseconds){
      break;
    }
  }
}

Relay.on('query', function (msg) {
    myPlugin.log('info','From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'query ' + msg[1] + ':' + msg[2]);
    if (msg[1] == 'G1') {
        send('query', 'G1', msg[2], ['G2', 'G4', 'G7'], msg[3]);
    }
});

function send() {
    var args = [].slice.call(arguments);
    var fn = typeof args[args.length - 1] == 'function' ? args.pop() : null;
    var port = args[4].port;
    var address = args[4].address;
    var msg = (args.join(','));
    var buf = new Buffer(msg);
    myPlugin.log('info',msg);
    sub.send(buf, 0, buf.length, port, address, fn);
};

exports.register.attributes = {
    pkg: require('../package.json')
};