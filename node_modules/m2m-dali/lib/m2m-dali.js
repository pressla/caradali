//m2m_dali.js

// Declare internals
var Path = require('path');
var Async = require('async');
var Dgram = require('dgram');
var Emitter = require('events').EventEmitter;
var Relay = new Emitter();
var sub = Dgram.createSocket('udp4');

var DaliSeq = require ('./dali-sequences');
var myApp = {};
var mySelf = {};
var internals = {
	initialized:false,
	multicastID: 'none', //239.1.1.200',
	targetPort:  61088
};

function m2mUtilsApplyToDefaults(current, update){
	for (var key in update) {
	   if (update.hasOwnProperty(key)) {
	      current[key] = update[key];
	      myApp.logger.log('info','[m2mUtilsApplyToDefaults]: '+key+'  = '+update[key]);
	   }
	}
    current.initialized = true;
}

exports.initPlugin = function (m2mApp, options, next) {

 	if (internals.initialized) {
        return next();
    }
    myApp = m2mApp;
    myApp.next = next;
   	myApp.logger.log('info','m2m-dali.initBegin');
    var settings = m2mUtilsApplyToDefaults(internals, options);

	sub.bind(internals.targetPort, function () {
    	sub.addMembership(internals.multicastID);     //listen to this group  
    	myApp.logger.log('info','server registered to listen to multicast ip: '+internals.multicastID);
	});

	sub.on('listening', function () {
    	var address = sub.address();
    	//myApp.logger.log('info',address);
    	myApp.logger.log('info','UDP listening ' + address.address + ":" + address.port);
	});

	sub.on('message', function (buf, rinfo) {
    	var buff = new Buffer(buf).toString('ascii');
    	var obj = buff.split(',');
    	obj.push(rinfo);
    	//myApp.logger.log('debug',JSON.stringify(obj));
    	//plugin.log('info',obj);
    	Relay.emit(obj[0], obj);    //Fire the event for each command
	});

    var daliconfig = require('./m2m-dali.config')
    DaliSeq.initSeq(myApp, daliconfig.serialdev);
    setTimeout(initme, 1000);

};

function initme() {
    myApp.logger.log('info','let the dogs out !');
    DaliSeq.executeSeq(DaliSeq.seq.On);
    myApp.next();
}

	//**********************  events processing *******************
Relay.on('switch', function (msg) {
   	myApp.logger.log('info','SWITCH cmd From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'switch ' + msg[1] + ':' + msg[2]);
    if (msg[2] > 0) {
        if (msg[2]>99) {
            DaliSeq.executeSeq(DaliSeq.seq.On);
        } else {
            if (msg[2]>50) {
                DaliSeq.executeSeq(DaliSeq.seq.DimUp);
            }
        }
        if (msg[2]<50) {
            DaliSeq.executeSeq(DaliSeq.seq.DimDown);
        }
    } else {
        DaliSeq.executeSeq(DaliSeq.seq.Off);
    }

});	

var frame;

Relay.on('sendcmd', function (msg) {
    myApp.logger.log('info','SENDCMD cmd From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'switch ' + msg[1] + ':' + msg[2]);
    if (internals.initialized == true) {
        //sendSeq(msg);
    }
}); 


Relay.on('query', function (msg) {
    myApp.logger.log('info','From: ' + msg[3].address + ':' + msg[3].port + ' - ' + 'query ' + msg[1] + ':' + msg[2]);
    if (msg[1] == 'G1') {
        send('query', 'G1', msg[2], ['G2', 'G4', 'G7'], msg[3]);
    }
});

function send() {
    var args = [].slice.call(arguments);
    var fn = typeof args[args.length - 1] == 'function' ? args.pop() : null;
    var port = args[4].port;
    var address = args[4].address;
    var msg = (args.join(','));
    var buf = new Buffer(msg);
    myPlugin.log('info',msg);
    sub.send(buf, 0, buf.length, port, address, fn);
};



