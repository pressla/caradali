// 1StrCalibrator.cpp : Defines the entry point for the console application.
//

#pragma warning(disable:4996) /* Deprecated by MSVisual ANSI stdio funcions */

#define VERSION "1.01"

//#define  COMIO_DEBUG

#include "stdafx.h"
#include <windows.h>
#include <conio.h>
#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>

void sendReboot(void);
void sendMagic(void);
void sendMagic1(void);
void sendFile(char *HexFileName);

int Mode;					// 0 - Normal; 1-SilentMode

const char main_Menu[]=\

"ESC - Exit\r\n"
">"\
"";

#define DEFAULT_ID 0xFF


HANDLE hFile;

// Configure COM port 
DCB comdcb;
	unsigned long l;
	COMSTAT comstat;


int _tmain(int argc, char* argv[])
{
 int idx=0;
 unsigned int fNumb = 3;
 
 char comname[256] = "COM1";

 printf("VER %s ",VERSION);

  if(argc>1) 
  {
   strcpy(comname,(const char*)argv[1]);
   if((comname[0]!='C')||(comname[1]!='O')||(comname[2]!='M'))
   {
	   printf("Wrong COM port name! Must be COM1, COM2 ...\n");
	   return 0;
   }
  }

   hFile = CreateFile(comname,
	   GENERIC_READ | GENERIC_WRITE,
	   0,
	   NULL,
	   OPEN_EXISTING,
	   0,
	   NULL);


 
if (hFile == INVALID_HANDLE_VALUE) 
{ 
 char temp[256]="\\\\.\\";
    strcat(temp,comname); // Try to open Virtul port
       hFile = CreateFile(temp,
	   GENERIC_READ | GENERIC_WRITE,
	   0,
	   NULL,
	   OPEN_EXISTING,
	   0,
	   NULL);

if (hFile == INVALID_HANDLE_VALUE) 
{ 
 	printf("Could not open file (error %d)\n", GetLastError());
    return 0;
}
}



  GetCommState( hFile, &comdcb);
  if(argc>2) 
  {
   comdcb.BaudRate = atoi((const char *)argv[2]);
  }
  else
  {
	    comdcb.BaudRate = CBR_115200;
  }
 
  if(argc>3){ Mode = atoi((const char *)argv[3]); }
  else{ Mode = 0; }

  comdcb.ByteSize = 8;
  comdcb.StopBits = TWOSTOPBITS;
  comdcb.Parity = NOPARITY;
  comdcb.fBinary = true;

  comdcb.fDtrControl = DTR_CONTROL_DISABLE;
  comdcb.fInX = false;
  comdcb.fNull = false;
  comdcb.fOutX = false;
  comdcb.fOutxCtsFlow = false;
  comdcb.fRtsControl =RTS_CONTROL_DISABLE;
  comdcb.fDsrSensitivity = false;
  comdcb.fOutxCtsFlow = false;
  comdcb.fOutxDsrFlow = false;



	while(kbhit())getchar(); // Cleanup

   if (!SetCommState(hFile, &comdcb)) 
   {
      // Handle the error.
      printf ("SetCommState failed with error %d.\n", GetLastError());
      return (3);
   }

   sendReboot();  // Send reboot command to the target

   if(Mode == 0){ sendMagic();}    // Send MAGIC to enter bootloader mode
   else{ sendMagic1(); }           // Send MAGIC to enter silent bootloader mode
   sendFile("firmware.hex");       // Upload FW to the target

	while(1)   // Terminal mode
	{
	 int c;
	    if(kbhit())
		{
			c = getch();
              WriteFile(hFile,&c,1,&l,NULL);
			  if(c==9) break;  // Exit on TAB
			  if(c==27) break; // Exti on ESC
		}

		::Sleep(0);
		ClearCommError(hFile,&l,&comstat);
		if(comstat.cbInQue>0)
		{	 
			ReadFile(hFile,&c,1,&l,NULL);
			putchar(c);
		}
	}

   printf("\r\nBuy");

	return 0;
}

void comreadout(void)
{
static int CRCount = 0;
	int c;
	do{
 
	    ClearCommError(hFile,&l,&comstat);
		if(comstat.cbInQue>0)
		{	 
			ReadFile(hFile,&c,1,&l,NULL);
			putchar(c);
			if(!Mode)
			{	CRCount++;
				if(CRCount > 63){	CRCount = 0;	printf("\r\n");	}
			}
		}
	}while(comstat.cbInQue>0);
}

void sendReboot(void)
{
	char magic[32] = "#DRST:000000\n";

	printf("\r\nReboot target by sending '#DRST:'...");
		WriteFile(hFile, magic, 4, &l, NULL);
		::Sleep(500);
		comreadout();
	printf(" done.");
}

void sendMagic(void)
{
 char magic[5]="DUST";

  printf("\r\nSending magic, press any key to stop...");
  while(!kbhit())
  {
	 WriteFile(hFile,magic,4,&l,NULL);
	 ::Sleep(500);
	 comreadout();
  }
  getch();
  printf(" done.");
}
void sendMagic1(void)
{
 char magic[5]="GOLD";

  printf("\r\nSending magic, press any key to stop...");
  while(!kbhit())
  {
	 WriteFile(hFile,magic,4,&l,NULL);
	 ::Sleep(500);
	 comreadout();
  }
  getch();
  printf(" done.");
}


unsigned int hex2int(char *s)
{
	unsigned int val=0;
	if(*s>'9')val += *s-'A'+10;
	else val += *s-'0';
	val<<=4; s++;
	if(*s>'9')val += *s-'A'+10;
	else val += *s-'0';
  return val;
}

void sendFile(char *HexFileName)
{
	FILE *hHex;
	char str[1024];
	unsigned int total_crc=0, local_crc=0x100;
	int Count = 0;

       if((hHex = fopen(HexFileName,"r"))==0) 
	   {
		   printf("\r\nERROR: Can't open %s",HexFileName);
		   return;
	   }
	   printf("\r\nSending file: %s\r\n" ,HexFileName);

	   while(!feof(hHex))
	   {
         if(fgets(str,1020,hHex))
		 {
		  total_crc += hex2int(&str[strlen(str)-3]);
		  //printf("\r\n");
		  if(Mode)
		  { printf("+");
			Count++;
			if(Count > 63){	Count = 0;	printf("\r\n");	}
		  }
		  WriteFile(hFile,str,(DWORD)strlen(str)-1,&l,NULL);
		 }

		 ::Sleep(100);
		 comreadout();
 	   }

	   local_crc -=0x02; local_crc-=((total_crc&0xFF00)>>8);local_crc-=(total_crc&0xFF);
	   sprintf(str,":00%04X02%02X", total_crc&0xFFFF,local_crc&0xFF);
	   WriteFile(hFile,str,(DWORD)strlen(str),&l,NULL);
	   printf("\r\n");
	   ::Sleep(200);
	   comreadout();
	   fclose(hHex);
	   printf("\r\nDone\r\n");
}